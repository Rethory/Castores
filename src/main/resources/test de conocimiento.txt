1.1) ¿Qué es un JOIN?
Un JOIN en SQL es como una operación que nos permite unir filas de dos o más tablas en una sola, si tenemos una tabla de "clientes" y otra de "pedidos", podemos usar un JOIN para ver qué pedidos ha realizado cada cliente.

1.2) Tipos de JOIN y su funcionamiento:
INNER JOIN: Este es el más común. Solo muestra las filas que tienen un valor coincidente en ambas tablas.
LEFT JOIN: Muestra todas las filas de la primera tabla izquierda y las filas coincidentes de la segunda tabla. Si no hay coincidencia, se muestran valores nulos para la segunda tabla. Como si tomaramos todos los dulces de la primera caja y los dulces que coincidan de la segunda, dejando huecos para los que no tienen pareja.
RIGHT JOIN: Es lo contrario al LEFT JOIN. Muestra todas las filas de la segunda tabla derecha y las coincidentes de la primera.
FULL OUTER JOIN: Muestra todas las filas de ambas tablas, tanto las que tienen coincidencias como las que no. Como juntar todos los platos de ambas cajas, incluso si no tienen pareja.

1.3) ¿Qué son los TRIGGERS?
Un TRIGGER es como una alarma que se activa automáticamente cuando ocurre un evento en una tabla. Por ejemplo, si borramos un cliente, podemos configurar un TRIGGER para que también se borren todos sus pedidos. Para mantener la integridad y consistencia de los datos así como automatizar procesos.

1.4) ¿Qué son los STORED PROCEDURES?
Un STORED PROCEDURE es como una receta de cocina que ya está preparada y guardada en la base de datos. En lugar de escribir la misma consulta SQL una y otra vez, podemos crear un STORED PROCEDURE una vez y luego llamarlo cuando lo necesitemos. Los STORED PROCEDURES se usan para

Dividir el código en partes más pequeñas y reutilizables.
Mejorar el rendimiento. A veces, los procedimientos almacenados pueden ejecutarse más rápido que las consultas SQL normales.
Se le pueden dar permisos específicos a los usuarios para ejecutar procedimientos almacenados.



 1.5) Traer todos los productos que tengan una venta.
SELECT p.*
FROM productos p
INNER JOIN ventas v ON p.idProducto = v.idProducto;
Usando Inner join solo se mostrarán los productos que tengan al menos una venta registrada en la tabla ventas

 1.6) Traer todos los productos que tengan ventas y la cantidad total de productos vendidos.
SELECT p.nombre, SUM(v.cantidad) AS total_vendido
FROM productos p
INNER JOIN ventas v ON p.idProducto = v.idProducto
GROUP BY p.nombre;
Usando Inner join para relacionar las tablas y SUM para calcular la cantidad total y con Group By agrupamos por nombre del producto.

 1.7) Traer todos los productos (independientemente de si tienen ventas o no) y la suma total ($) endida por producto.
SELECT p.nombre, COALESCE(SUM(v.cantidad * p.precio), 0) AS total_vendido
FROM productos p
LEFT JOIN ventas v ON p.idProducto = v.idProducto
GROUP BY p.nombre;
Mostramos todos los productos, incluyendo los que no han sido vendidos, y el valor total de las ventas por cada producto. Si un producto no tiene ventas, el valor total será 0.